{"ast":null,"code":"// In production, we register a service worker to serve assets from local cache.\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\nvar isLocalhost = Boolean(window.location.hostname === 'localhost' || // [::1] is the IPv6 localhost address.\nwindow.location.hostname === '[::1]' || // 127.0.0.1/8 is considered localhost for IPv4.\nwindow.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker.register(swUrl).then(function (registration) {\n    // eslint-disable-next-line no-param-reassign\n    registration.onupdatefound = function () {\n      var installingWorker = registration.installing;\n\n      installingWorker.onstatechange = function () {};\n    };\n  }) // eslint-disable-next-line no-unused-vars\n  .catch(function (error) {// console.error('Error during service worker registration:', error);\n  });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl).then(function (response) {\n    // Ensure service worker exists, and that we really are getting a JS file.\n    if (response.status === 404 || response.headers.get('content-type').indexOf('javascript') === -1) {\n      // No service worker found. Probably a different app. Reload the page.\n      navigator.serviceWorker.ready.then(function (registration) {\n        registration.unregister().then(function () {\n          window.location.reload();\n        });\n      });\n    } else {\n      // Service worker found. Proceed as normal.\n      registerValidSW(swUrl);\n    }\n  }).catch(function () {// console.log('No internet connection found. App is running in offline mode.');\n  });\n}\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    var publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', function () {\n      var swUrl = \"\".concat(process.env.PUBLIC_URL, \"/service-worker.js\");\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(function (registration) {\n      registration.unregister();\n    });\n  }\n}","map":{"version":3,"sources":["/home/local/ATALINK/thangnd/Desktop/AXON_challenge/src/utils/serviceWorker/index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","catch","error","checkValidServiceWorker","fetch","response","status","headers","get","indexOf","ready","unregister","reload","process","env","NODE_ENV","publicUrl","URL","PUBLIC_URL","origin","addEventListener"],"mappings":"AAAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA,IAAMA,WAAW,GAAGC,OAAO,CAACC,MAAM,CAACC,QAAP,CAAgBC,QAAhB,KAA6B,WAA7B,IAC1B;AACAF,MAAM,CAACC,QAAP,CAAgBC,QAAhB,KAA6B,OAFH,IAG1B;AACAF,MAAM,CAACC,QAAP,CAAgBC,QAAhB,CAAyBC,KAAzB,CAA+B,wDAA/B,CAJyB,CAA3B;;AAMA,SAASC,eAAT,CAAyBC,KAAzB,EAAgC;AAC9BC,EAAAA,SAAS,CAACC,aAAV,CACGC,QADH,CACYH,KADZ,EAEGI,IAFH,CAEQ,UAACC,YAAD,EAAkB;AACtB;AACAA,IAAAA,YAAY,CAACC,aAAb,GAA6B,YAAM;AACjC,UAAMC,gBAAgB,GAAGF,YAAY,CAACG,UAAtC;;AACAD,MAAAA,gBAAgB,CAACE,aAAjB,GAAiC,YAAM,CAAE,CAAzC;AACD,KAHD;AAID,GARH,EASE;AATF,GAUGC,KAVH,CAUS,UAACC,KAAD,EAAW,CAChB;AACD,GAZH;AAaD;;AAED,SAASC,uBAAT,CAAiCZ,KAAjC,EAAwC;AACtC;AACAa,EAAAA,KAAK,CAACb,KAAD,CAAL,CACGI,IADH,CACQ,UAACU,QAAD,EAAc;AAClB;AACA,QACEA,QAAQ,CAACC,MAAT,KAAoB,GAApB,IACAD,QAAQ,CAACE,OAAT,CAAiBC,GAAjB,CAAqB,cAArB,EAAqCC,OAArC,CAA6C,YAA7C,MAA+D,CAAC,CAFlE,EAGE;AACA;AACAjB,MAAAA,SAAS,CAACC,aAAV,CAAwBiB,KAAxB,CAA8Bf,IAA9B,CAAmC,UAACC,YAAD,EAAkB;AACnDA,QAAAA,YAAY,CAACe,UAAb,GAA0BhB,IAA1B,CAA+B,YAAM;AACnCT,UAAAA,MAAM,CAACC,QAAP,CAAgByB,MAAhB;AACD,SAFD;AAGD,OAJD;AAKD,KAVD,MAUO;AACL;AACAtB,MAAAA,eAAe,CAACC,KAAD,CAAf;AACD;AACF,GAjBH,EAkBGU,KAlBH,CAkBS,YAAM,CACX;AACD,GApBH;AAqBD;;AAED,eAAe,SAASP,QAAT,GAAoB;AACjC,MAAImB,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,IAAyC,mBAAmBvB,SAAhE,EAA2E;AACzE;AACA,QAAMwB,SAAS,GAAG,IAAIC,GAAJ,CAAQJ,OAAO,CAACC,GAAR,CAAYI,UAApB,EAAgChC,MAAM,CAACC,QAAvC,CAAlB;;AACA,QAAI6B,SAAS,CAACG,MAAV,KAAqBjC,MAAM,CAACC,QAAP,CAAgBgC,MAAzC,EAAiD;AAC/C;AACA;AACA;AACA;AACD;;AAEDjC,IAAAA,MAAM,CAACkC,gBAAP,CAAwB,MAAxB,EAAgC,YAAM;AACpC,UAAM7B,KAAK,aAAMsB,OAAO,CAACC,GAAR,CAAYI,UAAlB,uBAAX;;AAEA,UAAIlC,WAAJ,EAAiB;AACf;AACAmB,QAAAA,uBAAuB,CAACZ,KAAD,CAAvB;AACD,OAHD,MAGO;AACL;AACAD,QAAAA,eAAe,CAACC,KAAD,CAAf;AACD;AACF,KAVD;AAWD;AACF;AAED,OAAO,SAASoB,UAAT,GAAsB;AAC3B,MAAI,mBAAmBnB,SAAvB,EAAkC;AAChCA,IAAAA,SAAS,CAACC,aAAV,CAAwBiB,KAAxB,CAA8Bf,IAA9B,CAAmC,UAACC,YAAD,EAAkB;AACnDA,MAAAA,YAAY,CAACe,UAAb;AACD,KAFD;AAGD;AACF","sourcesContent":["// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.1/8 is considered localhost for IPv4.\n  window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      // eslint-disable-next-line no-param-reassign\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {};\n      };\n    })\n    // eslint-disable-next-line no-unused-vars\n    .catch((error) => {\n      // console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      // console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}