{"ast":null,"code":"import React from 'react';\nimport { getBreakpoints, system, getColor, getRadius, getBorderStyle, getShadow, getZIndex, getFont, getFontSize, getLineHeight, getFontWeight, getLetterSpacing, getTransition, getPx, getSpace, getBorder, getBorderWidth, getSize } from '@xstyled/system';\nimport _objectWithoutPropertiesLoose from '@babel/runtime/helpers/esm/objectWithoutPropertiesLoose';\nimport _extends from '@babel/runtime/helpers/esm/extends';\nimport { obj, string, func } from '@xstyled/util';\n/* eslint-disable no-undef */\n\nfunction useThemeBreakpoints(theme) {\n  return getBreakpoints({\n    theme: theme\n  });\n}\n/**\n * Minimum breakpoint width.\n * Null for the smallest breakpoint.\n */\n\n\nfunction useThemeMinValue(theme, key) {\n  var breakpoints = useThemeBreakpoints(theme);\n  var value = breakpoints[key];\n  return value === 0 ? null : value;\n}\n/**\n * Maximum breakpoint width. Null for the largest (last) breakpoint.\n * The maximum value is calculated as the minimum of the next one less 0.02px\n * to work around the limitations of `min-` and `max-` prefixes and viewports with fractional widths.\n * See https://www.w3.org/TR/mediaqueries-4/#mq-min-max\n * Uses 0.02px rather than 0.01px to work around a current rounding bug in Safari.\n * See https://bugs.webkit.org/show_bug.cgi?id=178261\n */\n\n\nfunction useThemeMaxValue(theme, key) {\n  var breakpoints = useThemeBreakpoints(theme);\n  var breakPoint = breakpoints[key];\n  return breakPoint === 0 ? null : breakPoint - 0.02;\n}\n\nfunction useViewportWidth() {\n  var _React$useState = React.useState(typeof window === 'undefined' ? null : window.innerWidth),\n      width = _React$useState[0],\n      setWidth = _React$useState[1];\n\n  React.useEffect(function () {\n    function handleResize() {\n      setWidth(window.innerWidth);\n    } // Add the listener, then setWidth to avoid race.\n\n\n    window.addEventListener('resize', handleResize);\n    setWidth(window.innerWidth);\n    return function () {\n      return window.removeEventListener('resize', handleResize);\n    };\n  }, []);\n  return width;\n}\n\nfunction useThemeBreakpoint(theme) {\n  var breakpoints = useThemeBreakpoints(theme);\n  var width = useViewportWidth();\n  return React.useMemo(function () {\n    return Object.keys(breakpoints).reverse().find(function (breakpoint) {\n      return width > breakpoints[breakpoint];\n    }) || null;\n  }, [breakpoints, width]);\n}\n\nfunction useThemeUp(theme, key) {\n  var value = useThemeMinValue(theme, key);\n  var width = useViewportWidth();\n  return width >= value;\n}\n\nfunction useThemeDown(theme, key) {\n  var value = useThemeMaxValue(theme, key);\n  var width = useViewportWidth();\n  return width < value;\n}\n\nfunction createBox() {\n  return [\"&&{\", system, \"}\"];\n}\n\ncreateBox.meta = system.meta;\n\nvar getNumber = function getNumber(transform) {\n  return function (value) {\n    var num = Number(value);\n    return transform(Number.isNaN(num) ? value : num);\n  };\n};\n\nvar SPACES = /\\s+/;\n\nvar getMultiDimensions = function getMultiDimensions(transform) {\n  return function (value) {\n    var values = value.split(SPACES);\n    return function (p) {\n      return values.map(function (value) {\n        return transform(value)(p);\n      }).join(' ');\n    };\n  };\n};\n\nvar COMMA = /\\s*,\\s*/;\n\nvar getMultiValues = function getMultiValues(transform) {\n  return function (value) {\n    var values = value.split(COMMA);\n    return function (p) {\n      return values.map(function (value) {\n        return transform(value)(p);\n      }).join(',');\n    };\n  };\n};\n\nvar getNumberPx =\n/*#__PURE__*/\ngetNumber(getPx);\nvar getNumberSpace =\n/*#__PURE__*/\ngetNumber(getSpace);\nvar getMultiNumberSpace =\n/*#__PURE__*/\ngetMultiDimensions(getNumberSpace);\nvar getNumberBorder =\n/*#__PURE__*/\ngetNumber(getBorder);\nvar getNumberBorderWidth =\n/*#__PURE__*/\ngetNumber(getBorderWidth);\nvar getMultiNumberBorderWidth =\n/*#__PURE__*/\ngetMultiDimensions(getNumberBorderWidth);\nvar getNumberSize =\n/*#__PURE__*/\ngetNumber(getSize);\nvar getMultiBorderStyle =\n/*#__PURE__*/\ngetMultiDimensions(getBorderStyle);\nvar propGetters = {\n  // getSpace\n  margin: getMultiNumberSpace,\n  'margin-top': getNumberSpace,\n  'margin-bottom': getNumberSpace,\n  'margin-left': getNumberSpace,\n  'margin-right': getNumberSpace,\n  padding: getMultiNumberSpace,\n  'padding-top': getNumberSpace,\n  'padding-bottom': getNumberSpace,\n  'padding-left': getNumberSpace,\n  'padding-right': getNumberSpace,\n  'grid-gap': getMultiNumberSpace,\n  'grid-row-gap': getNumberSpace,\n  'grid-column-gap': getNumberSpace,\n  // getColor\n  color: getColor,\n  'background-color': getColor,\n  'border-color': getColor,\n  'border-top-color': getColor,\n  'border-right-color': getColor,\n  'border-bottom-color': getColor,\n  'border-left-color': getColor,\n  'outline-color': getColor,\n  fill: getColor,\n  // getRadius\n  'border-radius':\n  /*#__PURE__*/\n  getMultiDimensions(\n  /*#__PURE__*/\n  getNumber(getRadius)),\n  'border-top-left-radius':\n  /*#__PURE__*/\n  getMultiDimensions(\n  /*#__PURE__*/\n  getNumber(getRadius)),\n  'border-top-right-radius':\n  /*#__PURE__*/\n  getMultiDimensions(\n  /*#__PURE__*/\n  getNumber(getRadius)),\n  'border-bottom-right-radius':\n  /*#__PURE__*/\n  getMultiDimensions(\n  /*#__PURE__*/\n  getNumber(getRadius)),\n  'border-bottom-left-radius':\n  /*#__PURE__*/\n  getMultiDimensions(\n  /*#__PURE__*/\n  getNumber(getRadius)),\n  // getBorder\n  border: getNumberBorder,\n  'border-top': getNumberBorder,\n  'border-right': getNumberBorder,\n  'border-bottom': getNumberBorder,\n  'border-left': getNumberBorder,\n  // getBorderWidth\n  'border-width': getMultiNumberBorderWidth,\n  'border-top-width': getNumberBorderWidth,\n  'border-right-width': getNumberBorderWidth,\n  'border-bottom-width': getNumberBorderWidth,\n  'border-left-width': getNumberBorderWidth,\n  'outline-width': getNumberBorderWidth,\n  // getBorderStyle\n  'border-style': getMultiBorderStyle,\n  'border-top-style': getBorderStyle,\n  'border-right-style': getBorderStyle,\n  'border-bottom-style': getBorderStyle,\n  'border-left-style': getBorderStyle,\n  'outline-style': getBorderStyle,\n  // getShadow\n  'box-shadow':\n  /*#__PURE__*/\n  getMultiValues(getShadow),\n  'text-shadow':\n  /*#__PURE__*/\n  getMultiValues(getShadow),\n  // getSize\n  width: getNumberSize,\n  height: getNumberSize,\n  'max-width': getNumberSize,\n  'max-height': getNumberSize,\n  'min-width': getNumberSize,\n  'min-height': getNumberSize,\n  // getZIndex\n  'z-index':\n  /*#__PURE__*/\n  getNumber(getZIndex),\n  // getFont\n  'font-family': getFont,\n  // getFontSize\n  'font-size':\n  /*#__PURE__*/\n  getNumber(getFontSize),\n  // getLineHeight\n  'line-height':\n  /*#__PURE__*/\n  getNumber(getLineHeight),\n  // getFontWeight\n  'font-weight': getFontWeight,\n  // getLetterSpacing\n  'letter-spacing':\n  /*#__PURE__*/\n  getNumber(getLetterSpacing),\n  // getTransition\n  transition: getTransition,\n  // getPx\n  top: getNumberPx,\n  right: getNumberPx,\n  bottom: getNumberPx,\n  left: getNumberPx\n};\n/* eslint-disable no-continue, no-loop-func, no-cond-assign */\n\nvar PROP_REGEXP = /(\\s*)([^&{}:;\\n]+):\\s*([^&{}:;\\n]+)(\\s*);/g;\nvar IMPORTANT_REGEXP = /\\s*!important\\s*/;\n\nfunction transform(rawValue) {\n  if (typeof rawValue !== 'string') return rawValue;\n  var matches;\n  var lastIndex = 0;\n  var values = [];\n\n  var _loop = function _loop() {\n    var _matches = matches,\n        start = _matches[1],\n        prop = _matches[2],\n        propValue = _matches[3],\n        end = _matches[4];\n    var getter = propGetters[prop];\n\n    if (getter) {\n      var hasImportant = IMPORTANT_REGEXP.test(propValue);\n      var cleanValue = propValue.replace(IMPORTANT_REGEXP, '');\n      values.push(rawValue.slice(lastIndex, matches.index));\n      values.push(function (p) {\n        return \"\" + start + prop + \": \" + getter(cleanValue)(p) + (hasImportant ? ' !important' : '') + \";\" + end;\n      });\n      lastIndex = matches.index + matches[0].length;\n    }\n  };\n\n  while (matches = PROP_REGEXP.exec(rawValue)) {\n    _loop();\n  }\n\n  values.push(rawValue.slice(lastIndex, rawValue.length));\n  return values;\n}\n/* eslint-disable no-underscore-dangle */\n\n\nvar join = function join() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  return args.filter(Boolean).join('.');\n};\n\nvar toVarName = function toVarName(key) {\n  return \"--\" + key.replace(/\\./g, '-');\n};\n\nvar toVarValue = function toVarValue(key, value) {\n  return \"var(\" + toVarName(key) + \", \" + value + \")\";\n};\n\nfunction toCustomPropertiesReferences(object, parent, theme) {\n  if (theme === void 0) {\n    theme = object;\n  }\n\n  var next = Array.isArray(object) ? [] : {};\n\n  for (var key in object) {\n    var value = object[key];\n    var name = join(parent, key);\n\n    if (obj(value)) {\n      next[key] = toCustomPropertiesReferences(value, name, theme);\n      continue;\n    }\n\n    if (string(value)) {\n      next[key] = toVarValue(name, value);\n      continue;\n    }\n\n    if (func(value)) {\n      next[key] = toVarValue(name, value({\n        theme: theme\n      }));\n      continue;\n    }\n  }\n\n  return next;\n}\n\nfunction toCustomPropertiesDeclarations(object, parent, theme, state) {\n  if (theme === void 0) {\n    theme = object;\n  }\n\n  if (state === void 0) {\n    state = {\n      value: ''\n    };\n  }\n\n  for (var key in object) {\n    var value = object[key];\n    var name = join(parent, key);\n\n    if (obj(value)) {\n      toCustomPropertiesDeclarations(value, name, theme, state);\n      continue;\n    }\n\n    if (string(value)) {\n      state.value += toVarName(name) + \": \" + value + \";\";\n      continue;\n    }\n\n    if (func(value)) {\n      state.value += toVarName(name) + \": \" + value({\n        theme: theme\n      }) + \";\";\n      continue;\n    }\n  }\n\n  return state.value;\n}\n\nvar STORAGE_KEY = 'xstyled-color-mode';\n\nvar isLocalStorageAvailable = typeof window !== 'undefined' &&\n/*#__PURE__*/\nfunction () {\n  try {\n    var STORAGE_TEST_KEY = STORAGE_KEY + \"-test\";\n    window.localStorage.setItem(STORAGE_TEST_KEY, STORAGE_TEST_KEY);\n    window.localStorage.removeItem(STORAGE_TEST_KEY);\n    return true;\n  } catch (err) {\n    return false;\n  }\n}();\n\nvar storage = isLocalStorageAvailable ? {\n  get: function get() {\n    return window.localStorage.getItem(STORAGE_KEY);\n  },\n  set: function set(value) {\n    return window.localStorage.setItem(STORAGE_KEY, value);\n  },\n  clear: function clear() {\n    return window.localStorage.removeItem(STORAGE_KEY);\n  }\n} : {\n  get: function get() {\n    return null;\n  },\n  set: function set() {},\n  clear: function clear() {}\n};\nvar COLOR_MODE_CLASS_PREFIX = 'xstyled-color-mode-';\n\nvar getColorModeClassName = function getColorModeClassName(mode) {\n  return \"\" + COLOR_MODE_CLASS_PREFIX + mode;\n};\n\nvar XSTYLED_COLORS_PREFIX = 'xstyled-colors';\nvar SYSTEM_MODES = ['light', 'dark'];\n\nfunction getModeTheme(theme, mode) {\n  return _extends({}, theme, {\n    colors: _extends({}, theme.colors, theme.colors.modes[mode])\n  });\n}\n\nvar getMediaQuery = function getMediaQuery(query) {\n  return \"@media \" + query;\n};\n\nvar getColorModeQuery = function getColorModeQuery(mode) {\n  return \"(prefers-color-scheme: \" + mode + \")\";\n};\n\nfunction hasColorModes(theme) {\n  return theme && theme.colors && theme.colors.modes;\n}\n\nfunction hasCustomPropertiesEnabled(theme) {\n  return theme && (theme.useCustomProperties === undefined || theme.useCustomProperties);\n}\n\nfunction hasMediaQueryEnabled(theme) {\n  return theme && (theme.useColorSchemeMediaQuery === undefined || theme.useColorSchemeMediaQuery);\n}\n\nfunction getInitialColorModeName(theme) {\n  return theme.initialColorModeName || 'default';\n}\n\nfunction getDefaultColorModeName(theme) {\n  return theme.defaultColorModeName || getInitialColorModeName(theme);\n}\n\nfunction createColorStyles(theme, _temp) {\n  var _ref = _temp === void 0 ? {} : _temp,\n      _ref$targetSelector = _ref.targetSelector,\n      targetSelector = _ref$targetSelector === void 0 ? 'body' : _ref$targetSelector;\n\n  if (!hasColorModes(theme)) return null;\n\n  var _theme$colors = theme.colors,\n      modes = _theme$colors.modes,\n      colors = _objectWithoutPropertiesLoose(_theme$colors, [\"modes\"]);\n\n  var styles = toCustomPropertiesDeclarations(colors, XSTYLED_COLORS_PREFIX, theme);\n\n  function getModePropertiesDeclarations(mode) {\n    var modeTheme = getModeTheme(theme, mode);\n\n    var _modeTheme$colors = modeTheme.colors,\n        modes = _modeTheme$colors.modes,\n        colors = _objectWithoutPropertiesLoose(_modeTheme$colors, [\"modes\"]);\n\n    return toCustomPropertiesDeclarations(_extends({}, colors, modes[mode]), XSTYLED_COLORS_PREFIX, modeTheme);\n  }\n\n  if (theme.useColorSchemeMediaQuery !== false) {\n    SYSTEM_MODES.forEach(function (mode) {\n      if (modes[mode]) {\n        var mediaQuery = getMediaQuery(getColorModeQuery(mode));\n        styles += mediaQuery + \"{\" + getModePropertiesDeclarations(mode) + \"}\";\n      }\n    });\n  }\n\n  var initialModeName = getInitialColorModeName(theme);\n  [initialModeName].concat(Object.keys(modes)).forEach(function (mode) {\n    var key = \"&.\" + getColorModeClassName(mode);\n    styles += key + \"{\" + getModePropertiesDeclarations(mode) + \"}\";\n  });\n  return targetSelector + \"{\" + styles + \"}\";\n}\n\nfunction getSystemModeMql(mode) {\n  if (typeof window === 'undefined' || window.matchMedia === undefined) {\n    return null;\n  }\n\n  var query = getColorModeQuery(mode);\n  return window.matchMedia(query);\n}\n\nfunction useSystemMode(theme) {\n  var configs = React.useMemo(function () {\n    if (!hasMediaQueryEnabled(theme)) return [];\n    return SYSTEM_MODES.map(function (mode) {\n      if (!theme.colors.modes[mode]) return null;\n      var mql = getSystemModeMql(mode);\n      return mql ? {\n        mode: mode,\n        mql: mql\n      } : null;\n    }).filter(Boolean);\n  }, [theme]);\n\n  var _React$useState = React.useState(function () {\n    var config = configs.find(function (config) {\n      return config.mql.matches;\n    });\n    return config ? config.mode : null;\n  }),\n      systemMode = _React$useState[0],\n      setSystemMode = _React$useState[1];\n\n  React.useEffect(function () {\n    var cleans = configs.filter(function (_ref2) {\n      var mql = _ref2.mql;\n      return mql.addListener && mql.removeListener;\n    }).map(function (_ref3) {\n      var mode = _ref3.mode,\n          mql = _ref3.mql;\n\n      var handler = function handler(_ref4) {\n        var matches = _ref4.matches;\n\n        if (matches) {\n          setSystemMode(mode);\n        } else {\n          setSystemMode(function (previousMode) {\n            return previousMode === mode ? null : mode;\n          });\n        }\n      };\n\n      mql.addListener(handler);\n      return function () {\n        return mql.removeListener(handler);\n      };\n    });\n    return function () {\n      return cleans.forEach(function (clean) {\n        return clean();\n      });\n    };\n  });\n  return systemMode;\n}\n\nvar useIsomorphicLayoutEffect = typeof window !== 'undefined' ? React.useLayoutEffect : React.useEffect;\n\nfunction useColorModeState(theme, _temp2) {\n  var _ref5 = _temp2 === void 0 ? {} : _temp2,\n      target = _ref5.target;\n\n  var systemMode = useSystemMode(theme);\n  var defaultColorMode = getDefaultColorModeName(theme);\n  var initialColorMode = getInitialColorModeName(theme);\n\n  var _React$useState2 = React.useState(function () {\n    if (!hasColorModes(theme)) return null;\n    return defaultColorMode;\n  }),\n      mode = _React$useState2[0],\n      setMode = _React$useState2[1]; // Add mode className\n\n\n  var customPropertiesEnabled = hasCustomPropertiesEnabled(theme);\n  var manualSetRef = React.useRef(false);\n  var manuallySetMode = React.useCallback(function (value) {\n    manualSetRef.current = true;\n    setMode(value);\n  }, []); // Set initial color mode in lazy\n\n  useIsomorphicLayoutEffect(function () {\n    if (!hasColorModes(theme)) return;\n    var storedMode = storage.get();\n    var initialMode = storedMode || systemMode || defaultColorMode;\n\n    if (mode !== initialMode) {\n      setMode(storedMode || systemMode || defaultColorMode);\n    }\n  }, []); // Store mode preference\n\n  useIsomorphicLayoutEffect(function () {\n    if (manualSetRef.current) {\n      storage.set(mode);\n    }\n  }, [mode]); // Sync system mode\n\n  useIsomorphicLayoutEffect(function () {\n    var storedMode = storage.get();\n    if (storedMode) return;\n    var targetMode = systemMode || defaultColorMode;\n    if (targetMode === mode) return;\n    setMode(targetMode);\n  }, [mode, systemMode, defaultColorMode]); // Add and remove class names\n\n  useIsomorphicLayoutEffect(function () {\n    if (!customPropertiesEnabled) return undefined;\n    var stored = storage.get();\n    var initial = initialColorMode !== mode;\n    if (!stored && !initial) return undefined;\n    var className = getColorModeClassName(mode);\n    var usedTarget = target || document.body;\n    usedTarget.classList.add(className);\n    return function () {\n      usedTarget.classList.remove(className);\n    };\n  }, [customPropertiesEnabled, target, mode, initialColorMode]);\n  return [mode, manuallySetMode];\n}\n\nfunction useColorModeTheme(theme, mode) {\n  var customPropertiesTheme = React.useMemo(function () {\n    if (!hasCustomPropertiesEnabled(theme)) return null;\n    if (!hasColorModes(theme)) return theme;\n\n    var _theme$colors2 = theme.colors,\n        modes = _theme$colors2.modes,\n        colors = _objectWithoutPropertiesLoose(_theme$colors2, [\"modes\"]);\n\n    return _extends({}, theme, {\n      colors: _extends({}, toCustomPropertiesReferences(colors, XSTYLED_COLORS_PREFIX, theme), {\n        modes: modes\n      }),\n      __rawColors: theme.colors\n    });\n  }, [theme]);\n  var swapModeTheme = React.useMemo(function () {\n    if (hasCustomPropertiesEnabled(theme)) return null;\n    if (!hasColorModes(theme)) return theme;\n\n    if (mode === getInitialColorModeName(theme)) {\n      return _extends({}, theme, {\n        __colorMode: mode\n      });\n    }\n\n    return _extends({}, theme, {\n      colors: _extends({}, theme.colors, theme.colors.modes[mode]),\n      __colorMode: mode,\n      __rawColors: theme.colors\n    });\n  }, [theme, mode]);\n  return customPropertiesTheme || swapModeTheme;\n}\n\nvar ColorModeContext =\n/*#__PURE__*/\nReact.createContext();\n\nfunction useColorMode() {\n  var colorModeState = React.useContext(ColorModeContext);\n\n  if (!colorModeState) {\n    throw new Error(\"[useColorMode] requires the ColorModeProvider component\");\n  }\n\n  return colorModeState;\n}\n\nfunction createColorModeProvider(_ref6) {\n  var ThemeContext = _ref6.ThemeContext,\n      ThemeProvider = _ref6.ThemeProvider,\n      ColorModeStyle = _ref6.ColorModeStyle;\n\n  function ColorModeProvider(_ref7) {\n    var children = _ref7.children,\n        target = _ref7.target,\n        targetSelector = _ref7.targetSelector;\n    var theme = React.useContext(ThemeContext);\n\n    if (!theme) {\n      throw new Error('[ColorModeProvider] requires ThemeProvider upper in the tree');\n    }\n\n    var colorState = useColorModeState(theme, {\n      target: target\n    });\n    var colorModeTheme = useColorModeTheme(theme, colorState[0]);\n    return (\n      /*#__PURE__*/\n      React.createElement(React.Fragment, null,\n      /*#__PURE__*/\n      React.createElement(ColorModeStyle, {\n        targetSelector: targetSelector\n      }),\n      /*#__PURE__*/\n      React.createElement(ThemeProvider, {\n        theme: colorModeTheme\n      },\n      /*#__PURE__*/\n      React.createElement(ColorModeContext.Provider, {\n        value: colorState\n      }, children)))\n    );\n  }\n\n  return ColorModeProvider;\n}\n\nfunction getInitScript(_temp3) {\n  var _ref8 = _temp3 === void 0 ? {} : _temp3,\n      _ref8$target = _ref8.target,\n      target = _ref8$target === void 0 ? 'document.body' : _ref8$target;\n\n  return \"(function() { try {\\n    var mode = localStorage.getItem('\" + STORAGE_KEY + \"');\\n    if (mode) \" + target + \".classList.add('\" + COLOR_MODE_CLASS_PREFIX + \"' + mode);\\n  } catch (e) {} })();\";\n}\n\nfunction getColorModeInitScriptElement(options) {\n  return (\n    /*#__PURE__*/\n    React.createElement(\"script\", {\n      key: \"xstyled-color-mode-init\",\n      dangerouslySetInnerHTML: {\n        __html: getInitScript(options)\n      }\n    })\n  );\n}\n\nfunction getColorModeInitScriptTag(options) {\n  return \"<script>\" + getInitScript(options) + \"</script>\";\n}\n\nexport { ColorModeContext, createBox, createColorModeProvider, createColorStyles, getColorModeInitScriptElement, getColorModeInitScriptTag, propGetters, transform, useColorMode, useColorModeState, useColorModeTheme, useThemeBreakpoint, useThemeBreakpoints, useThemeDown, useThemeUp, useViewportWidth };","map":null,"metadata":{},"sourceType":"module"}